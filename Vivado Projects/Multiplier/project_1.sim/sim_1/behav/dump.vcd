$date
   Thu Jun 30 10:49:57 2022
$end
$version
  13.1
$end
$timescale
  1ps
$end
$scope module Test $end
$var reg 4 ! X [3:0] $end
$var reg 3 " Y [2:0] $end
$var wire 7 # Z [6:0] $end
$scope module M1 $end
$var wire 4 $ X [3:0] $end
$var wire 3 % Y [2:0] $end
$var reg 7 & Z [6:0] $end
$var reg 4 ' ADD1 [3:0] $end
$var reg 4 ( ADD2 [3:0] $end
$var reg 4 ) ADD3 [3:0] $end
$var reg 4 * ADD4 [3:0] $end
$var wire 5 + RES1 [4:0] $end
$var wire 5 , RES2 [4:0] $end
$var integer 32 - K $end
$scope module FA1 $end
$var wire 4 . A [3:0] $end
$var wire 4 / B [3:0] $end
$var reg 5 0 Sum [4:0] $end
$upscope $end
$scope module FA2 $end
$var wire 4 1 A [3:0] $end
$var wire 4 2 B [3:0] $end
$var reg 5 3 Sum [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000 !
b10 "
b10000 #
b1000 $
b10 %
b10000 &
b0 '
b1000 (
b0 )
b100 *
b1000 +
b100 ,
b11 -
b0 .
b1000 /
b1000 0
b0 1
b100 2
b100 3
$end
